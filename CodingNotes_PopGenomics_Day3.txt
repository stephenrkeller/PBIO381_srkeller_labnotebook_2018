P/BIO381 Coding Notes for Mar 05, 2018:


#########  ADMIXTURE  ###############

for K in {1..10}

do

admixture -j 4 --cv=10 ./filename.vcf.geno $K \
| tee log${K}.out

done


grep CV log*.out >chooseK.txt


###  Making barplots:

* Download the Q files
* Download the cols_data.txt
* Download the vcf files (for PCA)


#############    Pop Helper    ###################


If there's time, install Pophelper and dependencies:

```{r}
# install dependencies and devtools
install.packages(c("Cairo","ggplot2","gridExtra","gtable","tidyr","devtools"),dependencies=T)

# install pophelper package from GitHub
devtools::install_github('royfrancis/pophelper')

Script provided on the tutorial


#################   PCA    ######################


# Set your working directory to where you downloaded your results files:
setwd("~/github/PBIO381_srkeller_labnotebook_2018/myresults/")

list.files() # Do you see your downloaded files there? If not, double check to make sure you've set your working directory to the right spot

# ...and load the libraries
library(vcfR)
library(adegenet)

#Read the vcf SNP data into R
vcf1 <- read.vcfR("OTAU_2018_reads2snps_DP10GP95_biallelic_MAF01_Miss0.8.vcf.recode.vcf")

# The adegenet package uses a highly efficient way of storing large SNP datasets in R called a "genlight" object. The following function creates a genlight object from your vcf:
gl1 <- vcfR2genlight(vcf1)
print(gl1) # Looks good! Right # of SNPs and individuals!

# For info, try:
gl1$ind.names
gl1$loc.names[1:10]
gl1$chromosome[1:3]

# Notice there's nothing in the field that says "pop"? Let's fix that...
meta <- read.table("cols_data.txt", header=T) # read in the metadata
meta <- meta[order(meta$sample_ID),] # sort by Individual ID, just like the VCF file

# Confirm the ID's are ordered the same in gl1 and ssw_meta:
gl1$ind.names
meta$sample_ID

gl1$pop <- meta$population # assign locality info

# Can store other metadata fields in 'gl1$other'. 
gl1$other <- as.list(meta) 

# Compute the PCA on the SNP genotypes and plot it:
pca1 <- glPca(gl1, nf=2, parallel=F,useC=T) # nf = number of PC axes to retain (here, 4)

pca1 # prints summary

# Plot the individuals in SNP-PCA space, with locality labels:
plot(pca1$scores[,1], pca1$scores[,2], 
     cex=2, pch=20, col=gl1$pop, 
     xlab="Principal Component 1", 
     ylab="Principal Component 2", 
     main="PCA on beetle data (Freq missing=20%; 133K SNPs)")
legend("topleft", 
       legend=unique(gl1$pop), 
       pch=20, 
       col=unique(gl1$pop))

# Which SNPs load most strongly on the 1st PC axis?
loadingplot(abs(pca1$loadings[,1]),
            threshold=quantile(abs(pca1$loadings), 0.999))

# Get their locus names
gl1$loc.names[which(abs(pca1$loadings)>quantile(abs(pca1$loadings), 0.9999))]



###################    DAPC  #######################

# Run the DAPC using population status to group samples
pop.dapc <- dapc(gl1, pop=gl1$pop, n.pca=8, n.da=3,
     var.loadings=T, pca.info=T, parallel=F)

# Scatterplot of results
scatter.dapc(pop.dapc, grp=gl1$pop, legend=T)

# Plot the posterior assignment probabilities to each group
compoplot(pop.dapc)

# Which loci contribute the most to distinguishing populations?
loadingplot(abs(pop.dapc$var.load), 
            lab.jitter=1, 
            threshold=quantile(abs(pop.dapc$var.load), probs=0.999))




